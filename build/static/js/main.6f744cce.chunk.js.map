{"version":3,"sources":["contexts/walletslice.js","components/Connect.js","contexts/detailSlice.js","components/Card.js","components/Nav.js","pages/Home.js","pages/Detail.js","Router.js","reportWebVitals.js","contexts/store.js","index.js"],"names":["counterSlice","createSlice","name","initialState","isConnected","publicKey","reducers","login","state","exit","setPublicKey","action","payload","actions","Connect","dispatch","useDispatch","className","style","height","src","alt","onClick","window","solana","isPhantom","connect","then","resp","pbKey","toString","console","log","catch","err","alert","open","detailSlice","data","setDetailData","Card","nft","useEffect","to","textDecoration","width","image","seller_fee_basis_points","Nav","display","xmlns","fill","class","viewBox","d","disconnect","on","href","Home","useSelector","wallet","useState","loading","setLoading","nftData","setNftData","a","getNftTokenData","getAllNftData","createConnectionConfig","clusterApiUrl","provider","ownerToken","isValidSolanaAddress","getParsedNftAccountsByOwner","publicAddress","connection","serialization","nfts","Object","keys","map","key","arr","n","length","i","uri","axios","get","val","push","Detail","detail","collection","properties","maxSupply","description","Router","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","Walletslice","DetailSlice","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.6f744cce.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    isConnected:false,\r\n    publicKey : \"\",\r\n  },\r\n  reducers: {\r\n    login: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.isConnected = true\r\n    },\r\n    exit: (state) => {\r\n      state.isConnected = false\r\n    },\r\n    setPublicKey: (state, action) => {\r\n      state.publicKey = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { login, exit, setPublicKey } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer","import React from 'react'\r\nimport {  useDispatch } from 'react-redux'\r\nimport { login, setPublicKey } from '../contexts/walletslice'\r\n\r\nexport default function Connect() {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const connectClick = () => {\r\n\r\n        const isPhantomInstalled = window.solana && window.solana.isPhantom\r\n\r\n        if (isPhantomInstalled) {\r\n            connectWallet() \r\n        }else{\r\n            window.alert(\"Please Install Phantom or Register to Phantom\")\r\n            window.open(\"https://phantom.app/\", \"_blank\");\r\n        }\r\n    }\r\n\r\n    function connectWallet() {\r\n        window.solana.connect()\r\n            .then(resp => {\r\n                const pbKey = resp.publicKey.toString()\r\n                console.log(resp)\r\n                dispatch(login())\r\n                dispatch(setPublicKey(pbKey))\r\n            })\r\n            .catch(err => {\r\n                window.alert(\"Error! Please try again later!\")\r\n          \r\n            })\r\n\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <div className=\"row  d-flex flex-column\" style={{ height: \"100vh\" }}>\r\n\r\n                    <div className=\"col-6 mx-auto my-auto\">\r\n                        <div className=\"d-flex flex-column align-items-center\">\r\n                            <img className=\"img-fluid w-25 mb-2\" src=\"https://cdn-icons.flaticon.com/png/512/3665/premium/3665909.png?token=exp=1637457620~hmac=c0f515bb214917799e2655e1a49c6cbd\" alt=\"img\" />\r\n                            <p className=\"text-light\">Please Connect to Wallet</p>\r\n                            <button onClick={connectClick} className=\"btn bg-primary w-50\">Connect</button>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nexport const detailSlice = createSlice({\r\n  name: 'data',\r\n  initialState: {\r\n    data: []\r\n  },\r\n  reducers: {\r\n    setDetailData: (state, action) => {\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setDetailData } = detailSlice.actions\r\n\r\nexport default detailSlice.reducer","import React,{useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux';\r\nimport {setDetailData} from \"../contexts/detailSlice\"\r\n\r\nexport default function Card({nft}) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setDetailData(nft))\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <Link to={`/detail/${nft.name}`} style={{textDecoration:\"none\"}} className=\"mx-auto text-dark\">\r\n            <div className=\"card m-2\" style={{width:\" 18rem\"}}>\r\n                <div className=\"mx-auto my-2\" style={{width:\" 11rem\"}}>\r\n                <img  src={nft.image} className=\" card-img-top\" alt=\"...\" />\r\n\r\n\r\n                </div>\r\n               \r\n                <div  className=\"card-body \" >\r\n                    <h5 className=\"\">{nft.name}</h5>\r\n                    <h5 className=\"\">{nft.seller_fee_basis_points}</h5>\r\n\r\n                 \r\n                </div>\r\n            </div>\r\n\r\n        </Link>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { exit, setPublicKey } from \"../contexts/walletslice\"\r\n\r\nexport default function Nav({ display }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHand = () => {\r\n\r\n\r\n        window.solana.disconnect()\r\n    \r\n           \r\n\r\n            window.solana.on('disconnect', () =>{\r\n                dispatch(exit())\r\n                dispatch(setPublicKey(\"\"))\r\n            } )\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <div className=\"container\">\r\n                    <Link className={`d-${display} text-dark`} to=\"/\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-left\" viewBox=\"0 0 16 16\">\r\n                        <path fill-rule=\"evenodd\" d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\" />\r\n                    </svg></Link>\r\n                    <ul className=\"navbar-nav  mb-2 mb-lg-0 ms-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <button onClick={clickHand} class=\"btn btn-light\" aria-current=\"page\" href=\"#\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-door-closed\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2zm1 13h8V2H4v13z\" />\r\n                                <path d=\"M9 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0z\" />\r\n                            </svg></button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Connect from '../components/Connect'\r\nimport Card from '../components/Card'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from \"axios\";\r\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\"; import { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig, } from \"@nfteyez/sol-rayz\";\r\nimport Nav from '../components/Nav';\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n\r\n    const isConnected = useSelector((state) => state.wallet.isConnected)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [nftData, setNftData] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        async function data() {\r\n            getNftTokenData()\r\n                .then((data) => {\r\n                    if (data) {\r\n                        setNftData(data)\r\n                        setLoading(false)\r\n                    }\r\n\r\n                })\r\n\r\n        }\r\n        console.log(isConnected);\r\n        data();\r\n        console.log(nftData);\r\n    }, [isConnected]);\r\n\r\n\r\n\r\n    //create a connection of devnet\r\n    const createConnection = () => {\r\n        return new Connection(clusterApiUrl(\"devnet\"));\r\n    };\r\n\r\n\r\n    //Function to get all NFT information.\r\n    //get NFT\r\n    const getAllNftData = async () => {\r\n        try {\r\n\r\n            if (isConnected === true) {\r\n                console.log(true);\r\n                const connect = await createConnectionConfig(clusterApiUrl(\"devnet\"));\r\n                const provider = window.solana;\r\n                let ownerToken = provider.publicKey;\r\n                const result = await isValidSolanaAddress(ownerToken);\r\n                const nfts = await getParsedNftAccountsByOwner({\r\n                    publicAddress: ownerToken,\r\n                    connection: connect,\r\n                    serialization: true,\r\n                });\r\n                console.log(nfts);\r\n\r\n                return nfts;\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    //Function to get all nft data\r\n    const getNftTokenData = async () => {\r\n        try {\r\n            let nftData = await getAllNftData();\r\n            var data = Object.keys(nftData).map((key) => nftData[key]); let arr = [];\r\n            let n = data.length;\r\n            for (let i = 0; i < n; i++) {\r\n                console.log(data[i].data.uri);\r\n                let val = await axios.get(data[i].data.uri);\r\n                arr.push(val);\r\n            }\r\n            console.log(`arr`)\r\n            return arr;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    if (!isConnected) {\r\n\r\n        return <Connect />\r\n\r\n    }\r\n    if (loading) {\r\n        return (\r\n            <div className=\"text-light\">\r\n                LOADING ...\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Nav display={\"none\"} />\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 d-flex flex-wrap\">\r\n                        {\r\n                            nftData.map((data) => (\r\n                                <Card nft={data.data} />\r\n\r\n\r\n                            ))\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Nav from '../components/Nav';\r\n\r\nexport default function Detail() {\r\n\r\n    const nftData = useSelector((state) => (state.detail.data))\r\n\r\n    console.log(nftData);\r\n    return (\r\n        <div>\r\n\r\n            <Nav display={\"\"}/>\r\n\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-5\">\r\n                        <img className=\"img-fluid\" src={nftData.image} />\r\n\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <h1 className=\"text-light\">{nftData.name}</h1>\r\n                            </div>\r\n                           \r\n                            <div className=\"col-12  mt-5\">\r\n                                <p className=\"text-light\">{nftData.collection.name}\r\n                                <br/> \r\n                                {nftData.seller_fee_basis_points}      \r\n                                <br/>\r\n                                {nftData.properties.maxSupply}                          \r\n                                </p>\r\n                            </div>\r\n\r\n                           \r\n                \r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-12 text-light text-center\">\r\n                        {nftData.description}\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Home from \"./pages/Home\"\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Detail from './pages/Detail';\n\n\nexport default function Router() {\n\n\n  return (\n  \n       <BrowserRouter>\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/detail\">\n            <Detail />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n    </BrowserRouter>\n \n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport Walletslice from './walletslice'\r\nimport DetailSlice from './detailSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n      wallet : Walletslice,\r\n      detail : DetailSlice\r\n  },\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Router';\nimport reportWebVitals from './reportWebVitals';\nimport store from './contexts/store'\nimport { Provider } from 'react-redux'\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}